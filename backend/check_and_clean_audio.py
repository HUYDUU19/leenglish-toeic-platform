#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
LeEnglish TOEIC - Audio Files Checker & Cleaner
Ki·ªÉm tra v√† x√≥a c√°c file √¢m thanh b·ªã l·ªói ho·∫∑c kh√¥ng ph√°t ƒë∆∞·ª£c
"""

import os
import mutagen
from mutagen.mp3 import MP3
import json
from datetime import datetime

AUDIO_BASE = "src/main/resources/static"
AUDIO_ORGANIZED_FOLDERS = ["audio/flashcards", "audio/exercises", "audio/lessons"]

def should_keep_file(file_path, audio_base):
    """Ki·ªÉm tra xem file c√≥ n√™n gi·ªØ l·∫°i kh√¥ng (trong th∆∞ m·ª•c organized)"""
    relative_path = os.path.relpath(file_path, audio_base)
    
    # Gi·ªØ l·∫°i file trong c√°c th∆∞ m·ª•c ƒë√£ t·ªï ch·ª©c
    for folder in AUDIO_ORGANIZED_FOLDERS:
        if relative_path.startswith(folder):
            return True
    
    return False

def check_audio_file(file_path):
    """Ki·ªÉm tra file √¢m thanh c√≥ h·ª£p l·ªá kh√¥ng"""
    try:
        # Ki·ªÉm tra k√≠ch th∆∞·ªõc file
        file_size = os.path.getsize(file_path)
        if file_size < 1000:  # File nh·ªè h∆°n 1KB ch·∫Øc ch·∫Øn b·ªã l·ªói
            return False, f"File qu√° nh·ªè: {file_size} bytes"
        
        # Ki·ªÉm tra header MP3
        audio = MP3(file_path)
        duration = audio.info.length
        
        if duration < 0.1:  # √Çm thanh ng·∫Øn h∆°n 0.1 gi√¢y c√≥ th·ªÉ b·ªã l·ªói
            return False, f"√Çm thanh qu√° ng·∫Øn: {duration:.2f}s"
        
        return True, f"OK - Duration: {duration:.2f}s, Size: {file_size} bytes"
        
    except Exception as e:
        return False, f"L·ªói ƒë·ªçc file: {str(e)}"

def scan_and_clean_audio():
    """Qu√©t v√† l√†m s·∫°ch c√°c file √¢m thanh b·ªã l·ªói"""
    print("üîç LeEnglish TOEIC - Audio Files Checker & Cleaner")
    print("üóëÔ∏è  X√≥a file √¢m thanh l·ªói v√† kh√¥ng c·∫ßn thi·∫øt")
    print("‚úÖ Gi·ªØ l·∫°i file trong: flashcards, exercises, lessons")
    print("=" * 60)
    
    report = {
        "scan_time": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "total_files": 0,
        "valid_files": 0,
        "invalid_files": 0,
        "deleted_files": 0,
        "kept_organized": 0,
        "deleted_unorganized": 0,
        "issues": []
    }
    
    # Qu√©t t·∫•t c·∫£ file MP3
    for root, dirs, files in os.walk(AUDIO_BASE):
        for file in files:
            if file.endswith('.mp3'):
                file_path = os.path.join(root, file)
                relative_path = os.path.relpath(file_path, AUDIO_BASE)
                
                report["total_files"] += 1
                
                # Ki·ªÉm tra xem file c√≥ trong th∆∞ m·ª•c organized kh√¥ng
                should_keep = should_keep_file(file_path, AUDIO_BASE)
                
                if should_keep:
                    # File trong th∆∞ m·ª•c organized - ki·ªÉm tra t√≠nh h·ª£p l·ªá
                    is_valid, message = check_audio_file(file_path)
                    
                    if is_valid:
                        report["valid_files"] += 1
                        report["kept_organized"] += 1
                        print(f"‚úÖ GI·ªÆ: {relative_path}: {message}")
                    else:
                        report["invalid_files"] += 1
                        report["issues"].append({
                            "file": relative_path,
                            "issue": message,
                            "action": "deleted_invalid_organized"
                        })
                        print(f"‚ùå X√ìA (l·ªói): {relative_path}: {message}")
                        
                        # X√≥a file organized b·ªã l·ªói
                        try:
                            os.remove(file_path)
                            report["deleted_files"] += 1
                            print(f"üóëÔ∏è  ƒê√£ x√≥a file l·ªói: {relative_path}")
                        except Exception as e:
                            print(f"‚ùå Kh√¥ng th·ªÉ x√≥a {relative_path}: {e}")
                else:
                    # File kh√¥ng trong th∆∞ m·ª•c organized - x√≥a lu√¥n
                    report["deleted_unorganized"] += 1
                    report["issues"].append({
                        "file": relative_path,
                        "issue": "File kh√¥ng trong th∆∞ m·ª•c organized",
                        "action": "deleted_unorganized"
                    })
                    print(f"üóëÔ∏è  X√ìA (kh√¥ng organized): {relative_path}")
                    
                    try:
                        os.remove(file_path)
                        report["deleted_files"] += 1
                        print(f"üóëÔ∏è  ƒê√£ x√≥a: {relative_path}")
                    except Exception as e:
                        print(f"‚ùå Kh√¥ng th·ªÉ x√≥a {relative_path}: {e}")
    
    # T·∫°o b√°o c√°o
    with open("audio_cleanup_report.json", "w", encoding="utf-8") as f:
        json.dump(report, f, indent=2, ensure_ascii=False)
    
    print("\n" + "=" * 60)
    print("üìä T·ªîNG K·∫æT:")
    print(f"   üìÅ T·ªïng file ki·ªÉm tra: {report['total_files']}")
    print(f"   ‚úÖ File h·ª£p l·ªá (gi·ªØ l·∫°i): {report['valid_files']}")
    print(f"   üìö File organized gi·ªØ l·∫°i: {report['kept_organized']}")
    print(f"   üóëÔ∏è  File kh√¥ng organized ƒë√£ x√≥a: {report['deleted_unorganized']}")
    print(f"   ‚ùå File l·ªói ƒë√£ x√≥a: {report['invalid_files']}")
    print(f"   üóëÔ∏è  T·ªïng file ƒë√£ x√≥a: {report['deleted_files']}")
    print("=" * 60)
    
    return report

if __name__ == "__main__":
    scan_and_clean_audio()
