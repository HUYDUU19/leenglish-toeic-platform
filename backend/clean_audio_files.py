#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
LeEnglish TOEIC - Audio Files Cleaner
Ki·ªÉm tra v√† x√≥a c√°c file √¢m thanh b·ªã l·ªói ho·∫∑c kh√¥ng ph√°t ƒë∆∞·ª£c
"""

import os
import wave
import mutagen
from mutagen.mp3 import MP3
import json
from pathlib import Path

def check_audio_file(file_path):
    """Ki·ªÉm tra file √¢m thanh c√≥ h·ª£p l·ªá kh√¥ng"""
    try:
        file_size = os.path.getsize(file_path)
        
        # File qu√° nh·ªè (d∆∞·ªõi 1KB) c√≥ th·ªÉ b·ªã l·ªói
        if file_size < 1024:
            return False, f"File qu√° nh·ªè: {file_size} bytes"
        
        # Ki·ªÉm tra v·ªõi mutagen
        try:
            audio = mutagen.File(file_path)
            if audio is None:
                return False, "Kh√¥ng th·ªÉ ƒë·ªçc metadata"
            
            # Ki·ªÉm tra duration
            if hasattr(audio, 'info') and hasattr(audio.info, 'length'):
                if audio.info.length < 0.1:  # D∆∞·ªõi 0.1 gi√¢y
                    return False, f"Duration qu√° ng·∫Øn: {audio.info.length}s"
            
            return True, f"OK - {file_size} bytes"
            
        except Exception as e:
            return False, f"L·ªói mutagen: {str(e)}"
            
    except Exception as e:
        return False, f"L·ªói ki·ªÉm tra file: {str(e)}"

def scan_audio_directory(base_dir):
    """Qu√©t th∆∞ m·ª•c √¢m thanh v√† ki·ªÉm tra t·ª´ng file"""
    audio_dir = os.path.join(base_dir, "src/main/resources/static/audio")
    
    if not os.path.exists(audio_dir):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c: {audio_dir}")
        return
    
    print(f"üîç Qu√©t th∆∞ m·ª•c √¢m thanh: {audio_dir}")
    print("=" * 60)
    
    valid_files = []
    invalid_files = []
    total_files = 0
    
    # Qu√©t t·∫•t c·∫£ file .mp3
    for root, dirs, files in os.walk(audio_dir):
        for file in files:
            if file.lower().endswith('.mp3'):
                total_files += 1
                file_path = os.path.join(root, file)
                rel_path = os.path.relpath(file_path, audio_dir)
                
                is_valid, message = check_audio_file(file_path)
                
                if is_valid:
                    valid_files.append(rel_path)
                    print(f"‚úÖ {rel_path} - {message}")
                else:
                    invalid_files.append({
                        'path': rel_path,
                        'full_path': file_path,
                        'reason': message
                    })
                    print(f"‚ùå {rel_path} - {message}")
    
    print("=" * 60)
    print(f"üìä T·ªîNG K·∫æT:")
    print(f"   üîä T·ªïng file MP3: {total_files}")
    print(f"   ‚úÖ File h·ª£p l·ªá: {len(valid_files)}")
    print(f"   ‚ùå File l·ªói: {len(invalid_files)}")
    
    return valid_files, invalid_files

def clean_invalid_files(invalid_files, confirm=True):
    """X√≥a c√°c file √¢m thanh kh√¥ng h·ª£p l·ªá"""
    if not invalid_files:
        print("üéâ Kh√¥ng c√≥ file n√†o c·∫ßn x√≥a!")
        return
    
    print(f"\nüóëÔ∏è S·∫º X√ìA {len(invalid_files)} FILE L·ªñI:")
    for item in invalid_files:
        print(f"   - {item['path']} ({item['reason']})")
    
    if confirm:
        response = input(f"\n‚ùì X√°c nh·∫≠n x√≥a {len(invalid_files)} file? (y/N): ").lower()
        if response != 'y':
            print("‚ùå H·ªßy b·ªè x√≥a file")
            return
    
    deleted_count = 0
    for item in invalid_files:
        try:
            os.remove(item['full_path'])
            print(f"üóëÔ∏è ƒê√£ x√≥a: {item['path']}")
            deleted_count += 1
        except Exception as e:
            print(f"‚ùå L·ªói x√≥a {item['path']}: {e}")
    
    print(f"\n‚úÖ ƒê√£ x√≥a {deleted_count}/{len(invalid_files)} file l·ªói")

def generate_report(valid_files, invalid_files):
    """T·∫°o b√°o c√°o chi ti·∫øt"""
    report = {
        "scan_time": "2025-07-02 22:30:00",
        "total_files": len(valid_files) + len(invalid_files),
        "valid_files": len(valid_files),
        "invalid_files": len(invalid_files),
        "valid_list": valid_files,
        "invalid_list": invalid_files
    }
    
    with open("audio_scan_report.json", "w", encoding="utf-8") as f:
        json.dump(report, f, indent=2, ensure_ascii=False)
    
    print(f"üìÑ ƒê√£ t·∫°o b√°o c√°o: audio_scan_report.json")

def main():
    """H√†m ch√≠nh"""
    print("üîä LeEnglish TOEIC - Audio Files Cleaner")
    print("=" * 60)
    
    # Qu√©t v√† ki·ªÉm tra file
    valid_files, invalid_files = scan_audio_directory(".")
    
    # T·∫°o b√°o c√°o
    generate_report(valid_files, invalid_files)
    
    # X√≥a file l·ªói (n·∫øu c√≥)
    if invalid_files:
        clean_invalid_files(invalid_files, confirm=True)
    
    print("\nüéâ Ho√†n t·∫•t ki·ªÉm tra v√† d·ªçn d·∫πp file √¢m thanh!")

if __name__ == "__main__":
    main()
